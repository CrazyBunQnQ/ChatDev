{
  "DemandAnalysis": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "CrazyCodeLab之前做过以下形式的产品：",
      "图片：可以以折线图、条形图、流程图、云图、甘特图等方式呈现信息。",
      "文档：可以通过 .docx 文件呈现信息。",
      "PowerPoint：可以通过 .pptx 文件呈现信息。",
      "Excel：可以通过 .xlsx 文件呈现信息。",
      "PDF：可以通过 .pdf 文件呈现信息。",
      "网站：可以通过 .html 文件展示个人简历、教程、产品或想法。",
      "应用：可以通过python实现可视化游戏、软件、工具等。",
      "仪表板：可以显示可视化实时信息的面板。",
      "思维导图：可以代表想法，并围绕核心概念排列相关概念。",
      "作为{assistant_role}，为了满足新用户的需求，并且产品要可实现，你应该和我继续讨论，决定我们想要的产品是哪种产品形态？",
      "请注意，我们只能讨论产品形态，而不能讨论其他任何内容！一旦我们都表达了自己的意见并一致同意讨论结果，我们中的任何一个人都必须主动结束讨论，只回复一行，以一个单词<INFO>开头，后面是我们的最终产品没有任何其他单词的形式，例如“<INFO> PowerPoint”。"
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "根据新用户的任务和一些创造性的头脑风暴想法如下：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "我们决定通过通过编程语言实现的可执行软件来完成任务。",
      "作为{assistant_role}，为了满足新用户的需求并使软件可实现，你应该提出一种具体的编程语言。如果python可以通过Python完成这个任务，请回答Python；否则，回答另一种编程语言（例如 Java、C++ 等）。",
      "请注意，我们只能讨论目标编程语言，而不能讨论其他任何内容！一旦我们都表达了自己的意见并一致同意讨论结果，我们中的任何一个人都必须主动终止讨论，并得出我们所讨论的最好的编程语言，不带任何其他言语或理由，仅返回一行，使用格式：\"<INFO> *\" 其中\"*\" 代表编程语言。"
    ]
  },
  "Coding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计如下：",
      "任务: \"{task}\".",
      "任务描述: \"{description}\".",
      "模态: \"{modality}\".",
      "Ideas:\"{ideas}\"",
      "我们决定通过一个可执行软件来完成任务，该软件包含多个文件。作为{assistant_role}，为了满足新用户的需求，您应该编写一个或多个文件，并确保架构的每个细节最终都以代码的形式实现。 {gui}",
      "一步步思考并说服自己做出正确的决定，以确保我们做出正确的决定。",
      "您将首先列出必要的核心类、函数、方法的名称，以及对其用途的快速评论。",
      "然后您将输出每个文件的内容，包括完整的代码。每个文件必须严格遵循 Markdown 代码块格式，其中必须替换以下标记，使得 \"FILENAME\" 是小写文件名，包括文件扩展名，编程语言中的 \"LANGUAGE\"，\"DOCSTRING\"是源代码中指定的字符串文字，用于记录特定的代码段，\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "您将从\"main\"文件开始，然后转到该文件导入的文件，依此类推。",
      "请注意，代码应该具有完整的功能。确保各项职能落到实处。没有占位符（例如 Python 中的“pass”）。"
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "任务: \"{task}\".",
      "源代码:",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循 markdown 代码块格式，其中必须替换以下标记，使得 \"FILENAME\" 是小写文件名，包括文件扩展名，编程语言中的 \"LANGUAGE\"，\"DOCSTRING\" 是源代码中指定的字符串文字，用于记录特定代码段，而 \"CODE\" 是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并为软件配备漂亮的图形用户界面（GUI），我们将讨论和设计许多用于GUI装饰的装饰图像。现在，我们通过列出GUI中一些功能独立的元素来继续讨论GUI美化，这些元素被认为是通过不同的图片来装饰的。例如，计算器中的十个数字（0-9）在功能上是独立的。",
      "要回答，请使用以下格式：\" FILENAME.png: DESCRIPTION\"，其中\"FILENAME\"是图像的文件名，\"DESCRIPTION\"表示独立元素的详细描述。例如：",
      "'''",
      "button_1.png: 上面有数字“1”的按钮。",
      "button_multiply.png: 其上带有星号 (“*”) 的按钮。",
      "background.png: 装饰围棋游戏的背景颜色",
      "'''",
      "现在，尽可能列出所有功能独立的元素。"
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "任务: \"{task}\".",
      "源代码:",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循 markdown 代码块格式，其中必须替换以下标记，使得 \"FILENAME\" 是小写文件名，包括文件扩展名，编程语言中的 \"LANGUAGE\"，\"DOCSTRING\" 是源代码中指定的字符串文字，用于记录特定代码段，而 \"CODE\" 是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求并为软件配备漂亮的图形用户界面（GUI），您将合并我们设计的图像进行GUI装饰。以下是一些现成的高质量图片和相应的说明：",
      "{images}",
      "请注意，设计的图像具有256x256像素的固定大小，并且图像与所有Python文件位于同一目录中；请根据GUI的大小动态缩放这些图像，并使用\"self.*\"以避免自动垃圾收集导致的显示相关问题。例如：",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "现在，使用部分或全部图片到 GUI 中，使其更加美观和富有创意。输出代码严格遵循上述要求的格式。"
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计如下：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "代码:",
      "\"{codes}\"",
      "未实现的文件:",
      "\"{unimplemented_file}\"",
      "在我们的软件中，每个文件必须严格遵循markdown代码块格式，其中必须替换以下标记，使得\"FILENAME\"是小写文件名，包括文件扩展名，编程语言中的\"LANGUAGE\"，\"DOCSTRING\"是源代码中指定的字符串文字，用于记录特定的代码段，而\"CODE\"是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足我们开发的软件的完整功能，您必须实现包含未实现类的{unimplemented_file}文件中的所有方法。现在，实现 {unimplemented_file} 的所有方法以及所需的所有其他代码，然后输出完全实现的代码，严格遵循所需的格式。"
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "Ideas: \"{ideas}\"",
      "代码:",
      "\"{codes}\"",
      "作为{assistant_role}，为了使软件无需进一步编码即可直接运行，CrazyCodeLab制定了以下规定：",
      "1) 应导入所有引用的类；",
      "2) 所有方法均应实现；",
      "3) 所有方法都需要有必要的注释；",
      "4) 没有潜在的错误；",
      "5) 整个项目符合用户提出的任务；",
      "6) 最重要的是，不仅要检查代码中的错误，还要检查代码的逻辑。确保用户可以与生成的软件交互，而不会丢失需求中的任何功能；",
      "现在，您应该一一检查上述规定，并详细审查代码，提出一条关于代码的最高优先级的评论，并指导我如何修复。请告诉我您最优先的意见以及相应的修改建议。如果代码是完美的并且您对它们没有任何评论，则仅返回一行\"<INFO> Finished\"。"
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "根据新用户的任务，我们设计的产品形态、语言和理念，我们开发的第一版源代码如下：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "Ideas: \"{ideas}\"",
      "代码: ",
      "\"{codes}\"",
      "对代码的评论:",
      "\"{comments}\"",
      "在软件中，每个文件必须严格遵循markdown代码块格式，其中以下标记必须被替换，使得\"FILENAME\"是小写文件名，包括文件扩展名，编程语言中的\"LANGUAGE\"，\"DOCSTRING\"是源代码中指定的字符串文字，用于记录特定的代码段，而\"CODE\"是原始代码。格式：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求，使软件具有创造性、执行力和健壮性，您应该根据注释修改相应的代码。然后，根据注释输出完整完整的代码，并修复所有错误。严格按照要求的格式返回所有代码。"
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "源代码:",
      "\"{codes}\"",
      "源码测试报告:",
      "\"{test_reports}\"",
      "请根据我的测试报告，定位并总结导致问题的Bug。"
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "源代码:",
      "\"{codes}\"",
      "源码测试报告：",
      "\"{test_reports}\"",
      "测试报告错误总结：",
      "\"{error_summary}\"",
      "请注意，每个文件必须严格遵循 markdown 代码块格式，其中必须替换以下标记，使得 \"FILENAME\" 是小写文件名，包括文件扩展名，编程语言中的 \"LANGUAGE\"，\"DOCSTRING\" 是源代码中指定的字符串文字，用于记录特定代码段，而 \"CODE\" 是原始代码：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为{assistant_role}，为了满足新用户的需求，并使软件运行平稳、健壮，您应该根据错误摘要修改代码。现在，使用上面示例的格式并根据错误摘要修改有问题的代码。根据测试报告和相应的说明输出您修复的代码（严格遵循上面定义的格式，包括FILENAME、LANGUAGE、DOCSTRING和CODE；严禁不完整的\"TODO\"代码）。如果没有报告错误，请仅返回一行，例如\"<INFO> Finished\"。"
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "列出了新用户的任务和我们开发的代码：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "Ideas: \"{ideas}\"",
      "代码: ",
      "\"{codes}\"",
      "作为{assistant_role}，您应该编写一个requirements.txt文件，该文件常用于Python项目中，用于指定项目正常运行所需的依赖项或包。它是一种以标准化格式记录和管理项目依赖项的方法。例如：",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "根据上面列出的代码和文件格式，编写requirements.txt文件，指定项目正常运行所需的依赖或包。"
    ]
  },
  "Manual": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "列出了新用户的任务、我们开发的代码和所需的依赖项：",
      "任务: \"{task}\".",
      "模态: \"{modality}\".",
      "Ideas: \"{ideas}\"",
      "代码: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "作为{assistant_role}，使用Markdown编写一个README.md文件，这是一份详细的软件使用手册，包括介绍软件的主要功能、如何安装环境依赖以及如何使用软件。例如：",
      "README.md",
      "```",
      "# LangChain",
      "通过可组合性使用 LLMs 构建应用程序",
      "正在寻找 JS/TS 版本？查看 LangChain.js。",
      "**生产支持：** 当您将 LangChains 投入生产时，我们很乐意提供更全面的支持。",
      "请填写此表格，我们将建立专门的 Slack 支持渠道。",
      "## 快速安装",
      "`pip install langchain`",
      "或",
      "`conda install langchain -c conda-forge`",
      "## 🤔 这是什么？",
      "大型语言模型 (LLM) 作为一项变革性技术正在兴起，使开发人员能够构建以前无法构建的应用程序。然而，单独使用这些法学硕士通常不足以创建真正强大的应用程序 - 当您可以将它们与其他计算或知识来源结合起来时，真正的力量就会出现。",
      "该库旨在协助开发这些类型的应用程序。这些应用程序的常见示例包括：",
      "**❓ 针对特定文件的问答**",
      "- 文档",
      "- 端到端示例：通过概念数据库进行问答",
      "**🤖 Agents**",
      "- 文档",
      "- 端到端示例：GPT+WolframAlpha",
      "## 📖 文档",
      "请参阅[此处](https://python.langchain.com) 以获取有关以下内容的完整文档：",
      "- 入门（安装、搭建环境、简单示例）",
      "- 操作方法示例（演示、集成、辅助函数）",
      "- 参考（完整的 API 文档）",
      "- 资源（核心概念的高级解释）",
      "```"
    ]
  }
}